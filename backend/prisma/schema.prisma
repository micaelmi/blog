generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(uuid())
  name       String
  username   String   @unique
  email      String   @unique
  password   String
  bio        String?
  createdAt  DateTime @default(now()) @map("created_at")
  userTypeId String   @map("user_type_id")
  userType   UserType @relation(fields: [userTypeId], references: [id])

  articles  Article[]
  comments  Comment[]
  feedbacks Feedback[]

  @@map("users")
}

model UnconfirmedUser {
  id         String   @id @default(uuid())
  name       String
  username   String   @unique
  email      String   @unique
  password   String   @db.VarChar(255)
  created_at DateTime @default(now())

  @@map("unconfirmed_users")
}

model UserType {
  id    String @id @default(uuid())
  type  String @unique
  users User[]

  @@map("user_types")
}

model Tag {
  id       Int          @id @default(autoincrement())
  name     String       @unique
  articles ArticleTag[]

  @@map("tags")
}

model Article {
  id        String   @id @default(uuid())
  title     String
  imageUrl  String   @map("image_url")
  content   String
  status    Boolean  @default(true)
  createdAt DateTime @default(now()) @map("created_at")
  userId    String   @map("user_id")
  author    User     @relation(fields: [userId], references: [id])

  tags     ArticleTag[]
  comments Comment[]

  @@map("articles")
}

model ArticleTag {
  id        Int    @id @default(autoincrement())
  articleId String @map("article_id")
  tagId     Int    @map("tag_id")

  article Article @relation(fields: [articleId], references: [id])
  tag     Tag     @relation(fields: [tagId], references: [id])

  @@unique([articleId, tagId])
  @@map("article_tags")
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now()) @map("created_at")
  userId    String   @map("user_id")
  articleId String   @map("article_id")

  author  User    @relation(fields: [userId], references: [id])
  article Article @relation(fields: [articleId], references: [id])

  @@map("comments")
}

model Feedback {
  id        String   @id @default(uuid())
  title     String
  message   String
  createdAt DateTime @default(now()) @map("created_at")
  userId    String   @map("user_id")

  user User @relation(fields: [userId], references: [id])

  @@map("feedbacks")
}

model EmailList {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  status    Boolean

  @@map("email_list")
}
